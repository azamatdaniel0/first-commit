name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  setup:
    runs-on: ubuntu-latest
    services:
      db:
        image: postgres
        env:
          POSTGRES_PASSWORD: change-password
          POSTGRES_DB: db
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=2s
          --health-timeout=2s
          --health-retries=10

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies for API
        run: |
          cd backend
          poetry install

      - name: Run database migrations
        run: |
          cd backend
          poetry run python src/manage.py makemigrations
          poetry run python src/manage.py migrate

      - name: Run API tests
        run: |
          cd backend
          poetry run pytest

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '21'

      - name: Install dependencies for Web
        run: |
          cd frontend
          pnpm install -r

      - name: Run Web tests
        run: |
          cd frontend
          pnpm test

  deploy:
    runs-on: ubuntu-latest
    needs: setup
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to production
        run: |
          echo "Deploying application..."  # Replace with your deployment commands
          # Example: scp files to a remote server or trigger a deployment script
